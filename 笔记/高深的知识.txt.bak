java虚拟机运行时数据区：
	1.程序计数器：
		用来记录当前线程执行的字节码的行号指示器。字节码解释器通过改变这个计数器的值来选取下一条要执行的字节码命令。

		java虚拟机的多线程是通过线程的轮流切换来实现的，所以每个线程都要记录自己线程对应的执行到的字节码行数，来确保当本线程取得了执行的权利之后可以从上次
		中断的位置继续执行。所以程序计数器是线程私有的，每个线程都有一个独立的程序计数器。
		
		注意：如果线程执行的是java方法则程序计数器存储的是字节码的行号，而如果执行的是native方法,则计数器为空。此内存区是唯一一个在java虚拟机规范中没有规定
		      任何OutOfMemoryError情况的区域。
	
	2.java虚拟机栈：
		和程序计数器一样也是线程私有的，生命周期和线程相同。每个方法执行的时候都会创建一个栈帧（stackFrame），用来储存局部变量表，操作栈、动态链接、方法出口
		等信息。每一个方法的调用直到执行结束就对应着栈帧在java虚拟机栈的从入栈到出栈的过程。

		现在许多程序员喜欢笼统的说堆栈，这其中的栈就是对应的java虚拟机栈中的局部变量表的部分。

		局部变量表存储着各种基本类型的变量（boolean，int，short，long，double，float，byte，char）和对象的引用类型（可能是对象地址的指针，也可能指向对象的句
		柄，和returnAdress类型（1.7之后好像没什么卵用了））。

		其中64位的double和long类型的数据会占用两个变量空间（slot），其他的都占用一个。局部变量表所需的空间在编译期间来分配（很关键），在运行期间不会改变局部
		变量表的大小。

		java虚拟机规范中，规定了这个区域的两种异常情况：
			1.如果线程请求的栈深度大于虚拟机所允许的深度，跑出StackOverflowError异常。
			2.如果虚拟机可以扩展，当扩展申请不到足够的内存，抛出OutOfMemoryError异常。

	
	3.本地方法栈：
		本地方法栈和java虚拟机方法栈功能类似，区别就是本地方法栈是为native方法服务的，而java虚拟机栈是为执行java方法（字节码）服务的。

	4.java堆：
		Java堆是线程共享的，在虚拟机启动的时候创建。此内存区域唯一的目的就是存放对象实例。

		java堆是垃圾收集器集中管理的主要区域。现在的收集器基本都采用分代回收算法，将堆分为年轻代和老年代（young generation and old generation）。再细致一点
		可以分成Eden空间、From Survivor空间和 To Survivor空间等。
		如果从内存分配的角度来看，java堆中还可能划分出多个线程私有的分配缓存区(Thread Local Allocation Buffer)

		主流的虚拟机都是可扩展的（通过-Xmx 和-Xms 控制），当java堆没有内存完成实例分配并且无法扩展，抛出OutOfMemoryError异常。

	5.方法区：
		和java堆一样是各个线程共享的内存区域。存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。

		有些在hotspot虚拟机的开发的开发者喜欢把方法区成为永久代（Permanent Generation），知识hotspot团队将GC扩展到方法区，对于其他虚拟机（BEA JRockit、IBM J9）
		是不存在方法区的概念的。

		垃圾回收的行为在这个区域还是比价少见的，但并非数据进入这个区域后，就如同这个区域的名字一样永久存在了。这个区域内存回收的目标主要是针对常量池的回收和类型
		卸载。

		当方法区无法满足内存分配需求时，抛出OutOfMemoryError异常。

	6.运行时常量池：
		运行时常量池是方法区的一部分（1.7开始归到堆内存空间中），class文件除了类的版本、字段、方法、接口描述等信息外，还有一项信息是常量池，用于存放编译期生成的
		各种字面量和符号引用，这部分内容在类加载后存放到运行时常量池中。
		
		一般来说，除了保存class文件描述的符号引用外，还会把翻译出来的直接引用页存储在运行时常量池中。

		运行时常量池从相对class文件常量池的另一个特征是动态性，java语言并不要求常量一定只能在编译期产生，运行期间也可能将新的常量放入池中，如：String的intern()方法

		当常量池无法申请到内存时会抛出OutOfMemoryError异常。

	7.直接内存：
		并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域。但是这部分也被频繁的使用，也可能导致OutOfMemroyError异常。
		
		jdk1.4加入NIO（New Input/Output），引入了基于通道的与缓冲区的IO方式，使用Native函数库直接分配堆外内存，然后通过存储在java堆中的DirectByteBuffer对象作为这块
		内存的引用来进行操作。这样能显著提高性能，避免了在java堆和Native堆中来回复制数据。

		直接内存不受java堆的内存限制，但是收到计算机总内存大小及处理器寻址空间的限制

2.java中对象的创建过程：
	当虚拟机遇到一条new指令的时候，会按照以下步骤进行：
	1.检查这个指令的参数是否在常量池中定位到一个类的符号引用，并检查这个类是否被加载、解析、初始化过。如果没有则先加载对应类。
	2.为新生对象分配内存，具体分配多少内存请看下一个知识点
		2.1堆内存分配方式（两种）
			（1）指针碰撞：当堆内存是规整的时候，堆内存分为两部分，一部分是用过的区域，一部分是空间区域，两个区间中间有一个指针来进行分隔，确定好对象分配的内存
			               大小后，将指针向空闲区移动对应大小的距离（相当于空间区减少，用过区增加）
			（2）空闲列表：当堆内存不是规整的时候，已使用的空间和空闲区间相互交错，没办法简单的进行指针碰撞，虚拟机就必须维护一个列表，记录哪些内存块是可用的，
				       在为新生对象分配空间的时候，找到一个足够大的空间划分给它。并更新列表上的记录。

		2.2影响堆内存是否规整的因素：
			垃圾收集器是否带有压缩整理的功能来决定
			在使用Serial、ParNew等带Compact（复制，即采用复制算法的）过程的收集器，堆内存就是规整的，选择使用指针碰撞的方法分配内存
			在使用CMS这种基于Mark-Sweep算法（标记清除算法）的收集器时，堆内存不规整，使用空闲列表的方法来分配内存

		2.3分配内存会出现并发问题，解决方法（两种）：
			（1）对分配内存空间的动作进行同步处理-虚拟机采用CAS（compare and swap）配上失败重试的方式保证原子性。
			（2）把内存分配动作划分到不同的空间之中进行，即每个线程在java堆中预先分配一小块内存，成为本地线程分配缓冲（Thread Local allocation Buffer，TLAB）。
			     哪个线程需要分配内存就在哪个线程的TLAB上分配，只有在TLAB用完并分配新的TLAB时，才需要同步锁定。

			PS:CAS是包含三个操作数：内存位置、预期原值、新值。如果内存位置上的值和预期原值一样，就将内存位置上的原值更新为新值，否则不更改。并返回现在这个位置
			   对应的值。如果失败一直进行CAS操作，直到成功。

	3.内存分配完成后，虚拟机将分配的内存空间都初始化为0值（不是初始化对象属性，而是内存空间初始化），不包含对象头。如果使用TLAB，这一工作也可以提前到TLAB分配时进行。
	  这一步保证了对象的实例字段如果不赋初值也能够直接使用，程序能访问到这些字段类型对应的零值，比如：boolean默认false，int默认0（对象的实例数据部分）

	4.虚拟机对对象进行必要设置（设置对象头，下面知识点会讲解对象头包含什么内容）

	上述步骤结束后，从虚拟机的视角看，对象创建完成，但是没有执行init操作。所有数据（对象的成员变量之类的）都还是零值，init方法就是按照程序员的意愿进行初始化，到此对象
	才算建立完毕。

3.对象的内存布局（三个区域：对象头、实例数据、对齐填充）
	1.对象头的构成（两部分）：
		（1）Mark Word：用于存储对象自身的运行时数据（如哈希码、GC分代年龄、锁状态标志，线程持有的锁、偏向线程ID、偏向时间戳等），这数据在32位和64位虚拟机分别为32
		     Bit和64bit。运行时数据很多，超出规定的32bit和64bit，mark word被设计成非固定数据结构（在状态不同时数据结构不同）以便存储尽量多的信息。
		     
			状态			标志位			存储内容

		      未锁定			01			对象哈希码、对象分代年龄
		      轻量级锁定		00			指向锁记录指针
		      膨胀（重量级锁定）	10			指向重量级锁指针
		      GC标记			11			空，不需要记录信息
		      可偏向			01			偏向线程ID、偏向时间戳、对象分代年龄

		（2）类型指针：即对象指向它的类元数据的指针，虚拟机通过这个指针确定这个对象是哪个类的实例。并不是所有虚拟机必须在对象数据上保留类型指针，即查找对象的类元信
		     息不一定要经过对象本身（在栈中存储的该对象的引用包含句柄中存有对象类型数据的指针，这个存在对象头的是直接指针的引用方式，猜测）。

		另外，如果对象是数组，对象头还要有一块用来记录数组长度的数据，因为虚拟机可以通过对象元数据确定普通对象大小，但是数组的元数据中无法确定大小。

	2.实例数据：
		存储对象真正有效的信息，包括子类定义的，还是父类继承下来的。hotspot虚拟机默认把相同宽度的字段分配到一起 long/double int short/float byte/boolean 在这个基础
		上，父类的变量在子类的前面，如果compactFields参数为true，子类的数据也有可能出现在父类数据的间隙中。

	3.对齐填充：
		这部分不是必要的，没有特殊含义，只是占位符的作用，因为hotspot内存管理系统要求对象大小必须是8字节的整数倍，对象头正好是8字节的整数倍（1或2倍）。所以实例数据
		没有对齐的时候就会用对齐填充来补全。


4.对象的访问定位（句柄和直接指针）：
	为了使用对象，会在栈上存储一个对象的引用，去访问它，具体的访问方式和虚拟机相关，主流的方式有句柄和直接指针两种
	
	1.句柄
		使用句柄会在java堆中划分出一个句柄池，引用存对象的句柄地址，句柄包含对象实例数据地址和类型数据地址信息（此部分信息在方法区）。

	2.直接指针
		引用直接存对象在堆中的地址，对象地址中包含类型数据地址信息（这部分信息在方法区）

	句柄的优点：存储的是稳定的句柄地址，当对象移动时（垃圾回收对象移动很正常）不会改变引用，而只需要改变句柄中实例数据的地址即可。
	直接指针的优点：速度快，节省了一次指针定位需要的开销（没有实例数据地址）， hotspot采用这种方式。






									第三章垃圾收集器与内存分配策略


1.概述：
	程序计数器（寄存器）、虚拟机栈、本地方法栈3个区域随线程的死亡而死亡（因为是线程私有的）。
	java堆和方法区却不一样，只有在程序运行期间才能知道会创建哪些对象，这部分对象回收都是动态的。垃圾回收关注的就是这部分区域的内存。

2.引用计数器法：
	如果对象被引用，对象的计数器加一，当对象的计数器为零（即没有引用指向），对象就会被回收。
	目前还没有虚拟机使用这种算法回收内存，因为它无法解决对象循环引用的问题。即A引用B，B引用A，这样AB永远都有引用指向，不会被垃圾回收器回收。

3.可达性分析算法：
	从GCRoots开始遍历，寻找完整的引用链，如果找完，有没有引用的对象（即从GCRoots不可达），证明此对象是不可用的，会被认定为回收对象。

	GCRoots包括：
		1.虚拟机栈中引用的对象。
		2.方法区类静态属性引用的对象。
		3.方法区中常量引用的对象。
		4.本地方发展中JNI（Native方法）引用的对象。

	在G1收集器中Region之间对性爱那个引用和其他收集器中新生代与老年代之间的对象引用，虚拟机都是通过RememberedSet来避免全堆扫描的。G1中每个Region都会有一个对应的
	RememberedSet，虚拟机发现程序在对Reference类型的对象进行写操作时，会产生一个WriteBarrier暂时中断写操作，检查Reference引用的对象是否处于不同的Region之中
	（在分代的例子中就是检查是否老年代中的对象引用了新生代的对象），如果是便通过CardTable把相关引用信息记录到被引用对象所属的Region和RememberedSet中，当进行内存
	回收的时候，在GCRoots的枚举范围中加入RememberedSet即可保证不对全堆扫描也不会有遗漏。

4.引用的类型：
	1.强引用：只要强引用还存在，垃圾收集器就永远不会回收。
	2.软引用：有用但非必须的对象，当内存不够的时候要发生OOM异常的时候，垃圾收集器就会将这些对象列进回收范围进行回收，如果内存还不够再抛出OOM异常。
	3.弱引用：非必需的对象，只能生存到下一次垃圾收集之前，如果发生垃圾收集，弱引用对象一定会被回收。
	4.虚引用：虚引用不会对对象有任何影响，无法通过虚引用取得对象实例，唯一的目的就是在被垃圾收集的时候收到一个系统通知。

5.finalize方法：
	不管对象自我拯救多少次（即在finalize方法中将自己赋给其他引用），finalize方式只能执行一次（即只能自我拯救一次）。
	如果虚拟机判定对象有必要执行finalize方法（没必要是指已经执行过finalize方法或者对象没覆盖finalize方法）。就会将对象放入F-queue队列中，并由虚拟机自动建立的、低
	优先级的finalizer线程去执行它，（执行是指会触发这个方法，但不一定保证等待方法执行结束，因为防止finalize方法中出现耗时长或者死循环的情况）。

6.回收方法区：
	永久代的垃圾收集主要分两部分内容：废弃常量和无用的类（常量和类型的卸载）。
	废弃常量比较好判断，但是无用的类就不好判断，要满足以下三个条件：
		1.该类的所有实例都已经被回收（因为堆中存储对象，包含类信息，需要用到）
		2.ClassLoader已经被回收
		3.该类的java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射访问该类方法。

7.垃圾收集算法：
	1.标记-清除算法：
		最基础的垃圾收集算法，分为标记和清除两个阶段，先标记需要回收的对象，然后清除被标记的对象
		缺点：导致大量的空间碎片，当有较大对象存储进来的情况，无法分配足够大的连续空间而不得不提前触发一次垃圾回收，效率低。
		使用该算法的垃圾收集器：
	2.复制算法：
		现在新生代常用的垃圾收集算法，将内存分为大小相等的两个区域（改进后，分为Eden区和两个Survivor区），当其中一块区域内存用完，无法放下要进来的对象时，就会将
		这个区域的对象逐一复制到另外一块区域中去，然后清除这块区域的内存。

		现在商业虚拟机都采用这种算法来回收新生代。并且将新生代分为Eden区和两个Survivor区（默认比例8:1:1），当新建对象时，都存在Eden区，如果满了触发minorGC，使用
		复制算法将回收后剩下的对象放到Survivor1中，等Eden又满了，回收Eden和Survivor1中的对象，放到Survivor2中。循环如此。
		
		Eden和Survivor对象为811比例是因为大部分新生对象都是朝生夕死的，98%的对象都会被回收，如果按照标准复制算法一半一半的分区会造成浪费，所以Survivor区很小，但是
		不是所有情况都会是回收后剩下10%不到的对象，如果超出了Survivor大小，那么需要依赖其他内存区域（老年代）的分配担保机制。

		分配担保：如果上一次垃圾收集后的对象不够放入Survivor区域中，那么这些对象会直接放入老年代。

	3.标记-整理算法：
		复制算法在存活对象较多的时候就会进行较多的复制操作，效率很低（所以只有新生代采用复制算法，因为对象存活率很低，一般98%的对象活不过下一次垃圾收集）。
		所以像是老年代这种对象存活率较高的区域就不会选择这种算法。

		先是标记，然后所有存活的内存都向一端移动，然后将剩余内存末端后面的内存全部清除。

	4.分代收集算法：
		将内存区域划分为几块按年龄区分的空间，如新生代和老年代。然后根据各个区域的年龄特点选择适合的垃圾收集算法，如新生代采用复制算法，老年代没有分配担保，所以
		必须选择标记-清除或者标记-整理（这里老年代选用的是标记-整理）。

8.枚举根节点（可达性分析）
	可作为GCRoots的节点主要在全局性的引用和执行上下文，现在很多应用方法区就数百兆，逐个检查引用会消耗很多时间。
	另外，可达性分析对时间的敏感还体现在GC停顿上，因为如果在进行可达性分析的时候，对象的引用关系不能发生变化，这就导致在进行GC的时候必须停顿所有的java线程。sun将这个
	称为Stop The World。

	目前主流的java虚拟机使用的是准确式GC，当系统停顿下来后，不需要一个不漏的检查所有执行上下文和全局引用位置，虚拟机有办法直接知道哪些地方存着对象引用。（通过MopMap实现）

	OopMap，在类加载的时候，HotSpot就会把对象内存上什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定位置记录下栈和寄存器中哪些位置是引用。


9.安全点：
	1.在OopMap的协助下，HotSpot可以快速完成GCRoots枚举，但是能够引起对象引用关系变化的操作很多，不可能为每一个操作都生成一个OopMap，那样需要很多空间来存储。
	只是在特定指令的时候记录OopMap，这些位置称为安全点。即程序不是在所有时候都能停顿，只有到达了安全点才能停顿。

	安全点既不能选太多，这样频繁GC会导致运行负荷变大，也不能选的太少，这样会导致让GC等待太长时间。

	每个程序指令的执行都很短暂，没有办法定为安全点。安全点选定是以能让程序长时间执行的标准来选定的。所以指令序列的复用（方法调用，循环跳转，异常跳转）的时候为安全点。
		
	2.还有一个需要考虑的问题是何如在GC发生时让所有线程都跑到安全点才停下来。有两种方案：
		（1）抢先式中断：不需要线程的执行代码主动配合，当GC发生时，所有线程全都停顿，然后如果哪个线程没到安全点，再放开让它跑到安全点。
		（2）主动式中断：设置一个全局的标志（例如isNeedStop，当需要停顿的时候isNeedStop设为true，否则false），然后每个线程在安全点附近会有一个轮询标志，只要到轮询
				 标志这里就去访问全局标志（isNeedStop)，当需要停顿则停顿下来。（注意线程的执行方式是抢执行机会的，切换着执行）。

10.安全区域：
	当线程被挂起，没有被分配CPU时间来执行（如sleep或blocked）线程无法响应JVM的中断请求，显然JVM也不能等到线程分配到CPU时间，这时就需要安全区域的概念。
	安全区域即线程中一段时间内对象的引用关系不会发生变化，但线程进入这个区域标志自身为安全区域中，当开始GC就不用管身处安全区域的线程了。用户线程和垃圾回收线程可以并发，
	当GC正在进行中，用户线程要出安全区域前先确定GC是否结束，如果结束了直接可以出来把身处安全区域的标志去掉，如果GC正在进行则停顿等待GC结束。

11.垃圾收集器：

	补充的通用虚拟机参数：
	-Xms java堆大小
	-Xmx java堆最大大小，如果设置和-Xms就是java堆不可扩展
	-Xmn java堆新生代大小

	并行：多个垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。
	并发：用户线程和垃圾收集线程同时执行（但并不一定是并行的，可能会交替执行），用户线程在继续运行，而垃圾收集线程在另外一个CPU上运行。


	1.serial收集器（jdk1.3）：
		单线程收集器，只会使用一个CPU或一个收集线程去完成垃圾收集工作，而且当它进行垃圾收集时，必须暂停其他所有工作线程，直到收集结束（stop the world）。
		它是运行在client模式下默认的新生代收集器。
		使用复制算法。
		没有safeRegion只有safePoint，因为无法发。
		优点：简单高效，没有和其他线程交互的开销。

	2.ParNew收集器（jdk1.4）：
		简单说，就是Serial多线程版。（并行）
		在server模式下默认的新生代收集器。
		使用复制算法。
		除了Serial收集器外，只有它可以和CMS收集器配合工作。在选择CMS收集器，默认新生代收集器为ParNew。
		在单核cpu上不会有超过Serial的性能，但是当cpu数量逐渐增多，ParNew的效果越来越好。

	3.Parallel Scavenge收集器（jdk1.4）：
		几乎和ParNew差不多。但是它的关注点和其他的垃圾收集器不同，它的关注点在控制程序的吞吐量。吞吐量=运行用户代码的时间/运行用户代码的时间+垃圾收集的时间。
		参数：
			-XX:MaxGCPauseMillis：用来控制垃圾收集停顿最大时间的。不能设置太小，会通过牺牲吞吐量来达到缩短垃圾收集时间的目的。（减小新生代的大小，会使垃圾
					      收集变得更频繁）。
			-XX:GCTimeRatio：直接设置吞吐量大小的。设置零到一百的整数，也是垃圾收集时间占总时间的比率。假如这个值为x，那么吞吐量为1/1+x。

			-XX:UseAdaptiveSizePolicy：打开此开关，不再需要手动指定新生代大小、Eden区和Survivor区的比例、晋升老年代对象大小等参数了，虚拟机会根据当前系统
						   运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量，这种调节方式称为GC自适应的调节策略
						   （GC Ergonomics）。

		也称为吞吐量优先收集器。

	4.Serial Old 收集器（jdk1.5）：
		Serial收集器的老年代版本，使用标记整理算法，在于给Client模式下的虚拟机使用的。
		在Server模式下，它的用途有两钟：
			1.在jdk1.5之前与 Parallel Scavenge收集器搭配使用。
			2.作为CMS收集器的预备方案，在并发收集发生Concurrent Mode Failure时使用。
		
	5.Parallel Old 收集器（jdk1.6）：
		是Parallel Scavenge收集器的老年代版本。使用多线程和标记整理算法。
		在此之前，Parallel Sacvenge收集器一直很尴尬，因为在1.5之前，只能搭配Serial Old使用。这种组合在老年代很大且硬件比较高级的环境中，效果不好。

	6.CMS收集器（jdk1.5）（Concurrent Mark Sweep）：
		是一种以获得最短回收停顿时间为目标的垃圾收集器。
		基于标记清除算法的。
		具体分为四个步骤：
			1.初始标记（CMS initial mark）：stop the world，虽然stw，但是仅标记和GCRoots直接关联到的对象，时间短，速度快。
			2.并发标记（CMS concurrent mark）：和用户线程同步标记，耗时间，但是没关系，因为是并发。用户感受不到停顿。
			3.重新标记（CMS remark）：stw，为了修正那些在并发标记时变动的一部分对象的标记记录，这个停顿时间会比初始标记时间长，但是远比并发标记时间短。
			3.并发清除（CMS concurrent sweep）：和用户线程同步清除。

		优点：并发收集，低停顿。
		缺点：
			1.CMS收集器对CPU资源非常敏感，面向并发设计的程序都会对CPU资源比较敏感。在并发阶段，虽然不会导致用户线程停顿，但是会占用一部分用户线程资源，
			  导致程序变慢。CMS默认启动的回收线程数量是（CPU数量+3）/4，也就是当CPU在4个以上的时候，并发收集线程不会占用少于25%的CPU资源，当CPU数量下降
			  时，CMS对用户线程的影响会越来越大。
			  为了应付这种情况，虚拟机提出了一种称为“增量式并发收集器”（i-CMS），原理和单CPU年代，多线程抢占CPU一样，垃圾收集线程和用户线程交替执行。
			  就是并发过程时间会更长，但是程序速度没有这么慢。



			2.CMS收集器无法处理浮动垃圾，可能出现Concurrent Mode Failure 失败而导致另外一次Full GC的产生。
			  浮动垃圾：由于CMS并发清理阶段用户线程还在运行，自然有新垃圾不断产生。这一部分垃圾出现在标记过后，CMS无法在当次收集中处理它们，只好留到下次
				    垃圾收集时候处理它们，这部分就是浮动垃圾。
			  因为有浮动垃圾的存在，CMS收集器不能像其他收集器那样，等老年代快满了开始收集垃圾。因为用户线程和垃圾收集线程在并发执行，所以需要留出一部分内存
			  空间给那些在并发时候产生的新对象。

			  在jdk1.5默认设置，CMS当老年代使用了68%后激活CMS收集。在jdk1.6默认设置，CMS收集的启动阈值已经提高到92%。
			  
			  参数：-XX:CMSInitiatingOccupancyFraction来提高触发CMS收集器的阈值。

			  要是CMS收集器在运行期间预留的内存无法满足程序的需要，就会出现Concurrent Mode Failure，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新
			  进行老年代的垃圾收集，这样停顿时间就很长了。所以-XX:CMSInitiatingOccupancyFraction设置太高就会容易出现Concurrent Mode Failure的出现，降低效率。




			3.因为CMS收集器是基于标记-清除算法实现的，所以会产生大量的空间碎片。会导致老年代的剩余空间很多，但是没有办法存放大对象而不得不触发一次full GC。
			  为了解决这个问题，提供了参数：
				-XX:+UseCMSCompactAtFullCollection：用于在CMS在顶不住要进行fullGC时开启内存碎片整理过程，内存整理必须不能并发的，空间碎片问题没有了，但是
					停顿时间变长了。
				-XX:CMSFullGCsBeforeCompaction：这个参数用于设置执行多少次不压缩的Full GC后来一次带压缩的。默认是0，相当于每次进入Full GC时都进行碎片整理

	7.G1收集器（jdk1.7）（grabage first）：
		特点：	
			1.并行和并发：充分利用多核多CPU的优势，使用多个CPU来缩短STW停顿时间，部分收集器需要停顿线程执行GC的操作，G1可以和用户线程并发执行。
			2.分代收集：G1不需要其他收集器配合就能独立管理java堆。但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获得更好
				    的收集效果。
			3.空间整合：G1整体上看是基于标记-整理算法的。但是从局部来看（两个Region之间）是基于复制算法实现的。无论怎么看,G1都不会产生内存碎片，不会因为找不到
				    连续的空间存放不下对象而触发GC。
				
			4.可预测停顿点：这是G1相对CMS另一个优点，虽然两个收集器都追求低停顿，但是G1还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间
					片段内，消耗在垃圾收集上的时间不超过n毫秒。
		
			
			在G1收集器之前都是分老年代和新生代，但是使用G1收集器时，java的堆内存布局就和其他的收集器有很大区别，他将整个java堆分成多个大小相等的独立区域
			（region），虽然保留了新生代和老年代的概念，但是它们不再是物理隔离了，它们都是一部分Region（不需要连续）的集合。

		G1之所以能够建立可预测的停顿世间模型，是因为它可以有计划的避免在整个java堆中进行全区域的垃圾收集，G1跟踪各个Region里面的垃圾堆积的价值大小，在后台
		维护一个优先列表，每个根据允许时间，优先回收价值最大的Region（这也是garbage first名字的来历）。这种使用Region划分内存空间以及有优先级区域的回收方式
		，保证了G1在有限时间内获得尽可能高的回收效率。

			
		那么就出现了一个问题：不是Region中的对象只能引用自己region中的对象，而是可以和整个java堆中任何对象发生引用，那么在做可达性分析的时候岂不是要扫描整个java
		堆才能保证准确性？
			答：在G1收集器中Region之间对性爱那个引用和其他收集器中新生代与老年代之间的对象引用，虚拟机都是通过RememberedSet来避免全堆扫描的。G1中每个Region
			都会有一个对应的RememberedSet，虚拟机发现程序在对Reference类型的对象进行写操作时，会产生一个WriteBarrier暂时中断写操作，检查Reference引用的对象
			是否处于不同的Region之中（在分代的例子中就是检查是否老年代中的对象引用了新生代的对象），如果是便通过CardTable把相关引用信息记录到被引用对象所属
			的Region和RememberedSet中，当进行内存回收的时候，在GCRoots的枚举范围中加入RememberedSet即可保证不对全堆扫描也不会有遗漏。

		
		运作大致步骤（排除维护RememberedSet的操作）：
			1.初始标记：在每个Region有两个标识用的bitmap，一个previous marking bitmap，一个next marking bitmap，bitmap中包含了一个bit的地址信息来指向对象的
				    起始点。
				    在初始标记之前，首先并发地清空next marking bitmap,然后STW，标识出每个region中root可直接访问到的对象，将region的top值放入next top at
				    mark start（TAMS）中，之后恢复所有线程。
				    这个top值就相当于region中最后一个对象的边界（已用内存的边界）。目的是为了让下一阶段用户线程并发运行时能在正确可用的region创建对象。

			2.并发标记：对堆中的对象进行可达性分析，找出存活的对象，可以和用户线程并发执行。
				    在此期间用户线程并发修改的对象引用关系存储到remembered set logs中。
				    新创建的对象则放入比top值更高的地址区间，并更新top值。

			3.最终标记：暂停所有用户线程，并行的将remembered set logs更新到remembered set中。

			4.筛选清除：先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来指定回收计划。只回收一部分Region，时间还是用户控制的，停顿用户
				    线程回大大提高收集效率，所以就做成了停顿用户线程并行清除。



12.理解GC日志：
	33.125:[GC [DefNew: 3324k->152K(3712K), 0.0025925 secs] 3324k->152k(11904k), 0.0031680 secs]
	100.667:[Full GC [Tenured: 0K->210K(10240K), 0.0149142 secs] 4603K->210K(19456K). [Perm : 2999K->2999K(21248K)]. 0.0150007 secs] [Times:user=0.01 sys=0.00, real =0.02 secs]

	最前面的数字33.125和100.667代表GC发生的时间（从虚拟机启动开始经过的秒数）。

	GC日志开头的[GC 和[Full GC 是这次垃圾收集停顿的类型，full GC是STW的。如果新生代也发生了Full GC可能是分配担保失败。

	[DefNew [Perm [Tenured 是GC发生的区域，这里显示的区域名是和使用的GC收集器是密切相关的。例如，Serial收集器，新生代收集就是DefNew。ParNew收集器对应[ParNew，
	Parallel scavenge对应PSYoungGen。

	3324K->152k(3712k)（在[]内就是指定内存区域）的含义是  GC前该内存区域已使用的容量->GC该内存区已使用容量（该内存区域总容量）。

	4603k->210k(19456k)（没在[]内就是整个java堆的内存情况）的含义是  GC前java堆已使用的容量->GC后java堆已使用的容量(java堆总容量)。

	0.0025925 secs代表该内存区域GC所占用的时间，单位为秒。   有的收集器会给出更具体的时间，如“[Times:user=0.01 sys=0.00,real=0.02 secs]”，user代表用户态CPU时间
	sys代表内核态CPU消耗时间，real代表墙钟时间，包括非运算的等待耗时。CPU时间则不包括，但是CPU时间会把多个CPU耗时叠加。所以经常看到user或sys超过real的情况。


13.垃圾收集器参数总结：
	在书的P90页

14.内存分配与回收策略：
	对象的内存分配，大致上讲就是堆上分配，对象主要分配在新生代的Eden区，如果开启了本地线程分配缓冲（TLAB，Thred Local Allocation Buffer），就优先在TLAB上分配。也有可能
	在老年代上直接分配（大对象或者分配担保机制）。这些分配规则是根据使用哪种垃圾收集器和虚拟机内存相关的参数设置的。

	接下来将会用Serial/Serial Old收集器（ParNew/Serial Old）下作为例子：
		
		1.对象优先在Eden上分配：
			当Eden没有足够空间，将触发一次Minor GC。
			Survivor区的大小默认是：8:1:1，可以通过-XX:SurvivorRatio参数来控制Eden和Survivor区的大小。
	
			Minor GC：发生在新生代的垃圾收集动作，stop the world 因为java新生代中的对象大多都是朝生夕灭的，所以Minor GC非常频繁，一般回收速度也比较快。

			Full GC：发生在老年代的垃圾收集动作，出现了Full GC至少伴随一次Minor GC ，Full GC一般比Minor GC慢十倍以上。

		
		2.大对象直接进入老年代：
			大对象指需要大量连续内存空间的java对象，最典型的就是很长的字符串和数组。
			大对象对内存分配来说是一个坏消息（应尽量避免短命的大对象）。
			经常出现大对象会导致还有不少内存空间就提前触发GC来腾出地方安置它们。
			可以通过-XX:PretenureSizeThreshold参数来设置超过多少大小，就直接将对象放入老年代中，避免新生代频繁发生复制。（这个参数只有在ParNew和Serial中有）


		3.长期存活的对象将直接进入老年代：
			虚拟机给每个对象定义了一个对象年龄计数器，如果对象在Eden出生并经过一次Minor GC后仍存活，并且被Survivor容纳，就会被移动到Survivor区，并且年龄+1。
			当它的年龄增长到一定数量（默认15岁）就会被晋升到老年代中。
			对象晋升老年代的年龄阈值可以通过-XX:MaxTenuringThreshold参数来设置。

		4.动态对象年龄判定：
			为了能更好适应不同程序的内存状况，虚拟机并不是永远地要求对象年龄必须达到MaxTenuringThreshold才能晋升老年代。
			如果在Survivor中相同年龄的所有对象大小的总和超过了Survivor的一半年龄大于或等于该年龄的对象就可以直接进入老年代。

		
		5.空间分配担保：
			在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间（可能有新生代全部进入老年代的极端情况）。
			如果是，就可以保证这次Minor GC是安全的。
			如果不是，虚拟机查看HandlePromotionFailure设置值是否允许担保失败。
			如果允许担保失败，就继续检查老年代最大可用连续的内存空间是否大于历次晋升到老年代对象的平均大小。
			如果大于，则进行一次MinorGC尽管这是有风险的。
			如果小于或者HandlePromotionFailure不允许冒险，则进行一次Full GC。

			在jdk1.6update24之后，规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升至老年代对象的平均大小，就会进行Minor GC 否则进行Full GC。


								



									第六章  类文件结构
1.平台无关性：
	在java中我们只需要写出代码，然后java编译器编译过后生成java的class文件，然后javaclass文件被虚拟机解析执行，虚拟机去跟硬件打交道，所以我们只需要编写class文件。
	并不用关心硬件兼容问题，这些问题都由java虚拟机来解决（对不同的操作系统，使用的对应的操作系统的命令来进行操作，猜测）。

2.class类文件的结构
	class文件是一组以8位字节为基础单位的二进制流，没有分隔符，储存的基本都是必要信息。

	当遇到需要占8位字节以上空间的数据项时，则会按照高位在前方式分割成若干个8位字节存储。

	class文件采用一种类似C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型：无符号数和表。
		无符号数：属于基本的数据类型，u1，u2，u4，u8代表1字节、2字节、4字节、8字节的无符号数。无符号数可以用来描述数字、索引引用、数量值或按UTF-8编码构成字符串。
		表：由多个无符号数或其他表作为数据项构成的复合数据类型，基本名称都以‘_info’结尾。用来描述复杂的层次结构，整个class文件就是一张表。

	文件格式见书P165

	当需要描述某一类型的数据不定多时，会使用一个前置的容量计数器加若干个连续的数据项的形式。

	class文件的细节被严格规定，不能变动前后顺序，长度等都不允许改变。




	2.1魔数和class文件的版本
		class文件开头的4个字节称为魔数，唯一作用是确定这个文件是否为一个能被虚拟机接受的class文件。（其他文件也有魔数，用来确认文件类型，不用后缀因为可变）
		0xCAFEBABE

		魔数后面的4个字节存储的class文件的版本号：第5第6个字节是次版本号，7、8个是主版本号。

	2.2常量池：
		版本号之后就是常量池的入口。可以理解为class文件中的资源仓库。

		它是和其他项目关联最多的数据类型，也是占用空间最大的数据项目之一。也是第一个出现的表结构的数据项目。

		class中好多数据类型中都包含一个指向常量池中数据的索引。

		常量池中常量的数量是不固定的，所以在常量池入口有一个u2的常量池容量计数值。这个计数器是从1开始的（跟平常从0开始的不一样）。所以计数器为22。那就说明有21个
		常量。把0空出来是为了表达“不引用任何一个常量池项目”这种情况。其他集合的计数器都是从0开始的。
			
		常量池中主要存储两大类常量：字面量和符号引用。
			字面量：相当于声明为final的常量值等。
			符号引用（包括三类常量）：类和接口的全限定名、字段的名称和描述符（[Ljava.lang.Object）、方法的名称和描述符（(Ljava/lang/Object)V）。

		当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址之中。

		常量池中每一项常量都是一张表，共有14中不同的表结构（jdk1.7之前是11中，新增CONSTANT_MethodHandle_info、CONSTANT_MethodType_info、CONSTANT_InvokeDynamic_info
		用来支持动态语言调用）。 
		这14张表共同特点是，表开始的第一位是一个u1类型的标志，代表当前这个常量属于哪种常量类型。但是每个类都有不同的数据结构
		具体见书P169

		使用javap -verbose TestClass.class可以用来解析class文件。


		CONSTANT_Class_info型常量：
			数据结构：
				u1	tag		1个
				u2	name_index	1个

				tag就是标志，用来判定是什么数据类型的常量。
				name_index是指向常量池的索引，class表中的这个索引一般指向utf8表，用来表示类的全限定名的。

		CONSTANT_Utf8_info型常量：
			数据结构：
				u1	tag		1个
				u2	length		1个
				u1	bytes		length个
				
				tag就是标志，用来判定是什么数据类型的常量。
				length是计数用的，计算后面多少个byte
				bytes是一个存储单位，比如存储一个char

		常量池中各个表结构见书P172


	2.3访问标志（类的）：
		在常量池结束后，紧接着两个字节（u2）代表访问标志，这个标志用于标志一些类或接口层次的信息，包括：是否定义public，是否为abstract类型。如果是类的话，是否是final等。
		具体见书P173，这个标志不是按照顺序横向排列的，是按照每个标志有对应的值，然后将这些值相加所得，所以要求相加值具有唯一性。

	2.4类索引、父类索引与接口索引集合（确认类的继承关系和实现的接口）：
		类索引、父类索引、接口索引按照顺序排列在访问标志之后。

		类索引和父类索引都是u2型的数据，而接口索引集合是一组u2类型的数据集合（因为类只允许单继承，但是可以实现多个接口）。类索引和父类索引都是用来确定类本身和父类
		的全限定名，而接口索引按声明顺序依次排列（因为数量不固定，所以接口索引集合前面有u2类型的接口计数器）。每个类都应该有父类（除Object外，只有Object的父类索引
		为0），所以每个类的父类索引都不为0。

		类索引和父类索引都是指向常量池中CONSTANT_Class_info类型的描述符（而class_info又指向Utf8_info），用于查找类和父类的全限定名。（接口索引也应该如此）

	2.5字段表集合：
		用于描述接口或类中声明的变量。只包含类级变量和实例变量，不包含方法内部声明的局部变量。

		字段可以包含的信息：作用域（public protected private）、是实例变量还是类变量（static）、可变性（final）、并发可见性（volatile）、可否序列化（transient）、
		字段数据类型（基本类型、对象、数组）、字段名称。
		修饰符信息适合用标识位来标识，而字段数据类型和字段名称是不固定的，需要用常量池引用来表示。
		具体见书P176

		数据结构：
			u2		access_flags		1个		//访问权限修饰符
			u2		name_index		1个		//名称索引、指向常量池中utf8表（比如：public void inc（）方法就是inc）
			u2		descriptor_index	1个		//描述符索引、指向常量池中utf8表（public void inc（Object[] a）方法就是（[Ljava/lang/Object）V）
			u2		attrubutes_count	1个                  //和下面这个是属性表
			attribute_info	attributes		attributes_count个
			
			描述符的作用是用来描述字段的数据类型、方法的参数列表（数量、类型、顺序）和返回值的。
			具体见书P177

		这一部分只描述变量的声明，比如：private int m；具体m的值到底是多少，就在属性表里储存，也就是attributes_count和attributes里。

		！！字段表集合中不会列出从超类或父接口中继承而来的字段，但有可能留出原本java代码之中不存在的字段，例如：内部类为了保持对外部类的访问性会自动添加指向外部
		类实例的字段。

		java中字段无法重载，不管修饰符和数据类型是否一样，字段名称必须不同。但对字节码来说，如果两个字段描述符不一致，字段重名就是合法的。


	2.6方法表集合：
		数据结构和字段表相同，但是标识位的具体内容不一样，因为方法的修饰符和字段的不完全一样。
		方法的方法体中的代码存放在attribute表中，也就是attribute_count和attributes中的一个Code属性中。

		如果父类方法没有在子类中被重写，方法表集合中就不会出现来自父类的方法信息。同样有可能出现编译器自动添加的方法，最经典的就是类构造器“<clinit>”和实例构造
		方法“<init>”。这两个方法不是真正意义上的构造函数，而是通过分析类中初始化数据由编译器自动生成的。

	2.7属性表集合（class文件、字段表、方法表都可以携带自己的属性表集合）：
		和class文件其他数据项目不同，不要求各个属性具有严格的顺序，每个人实现的编译器都可以向属性表中写入自己定义的属性信息，java虚拟机运行时会忽略它不认识的属性
		，java虚拟机也定义了21项能够被识别的属性
		具体见书P180

		属性表结构：
			u2		attribute_name_index		1个			//指向utf8_info，例如Code
			u4		attribute_length		1个			//属性值的长度
			u1		info				attribute_length个	//长度为整个属性表长度-6字节（索引和长度的字节数）

		
		1.Code属性：
			Code属性的数据结构：

				u2		attribute_name_index		1个			
				u4		attribute_length		1个			
				u2		max_stack			1个			//操作数栈深度最大值
				u2		max_locals			1个			//局部变量表存储空间,单位为slot
				u4		code_length			1个			
				u1		code				code_length个		//字节码指令的一系列字节流，最重要的一部分
				u2		exception_table_length		1个			
				exception_info	exception_table			exception_table_length个
				u2		attributes_count		1个
				attribute_info	attributes			attributes_count个	

				max_stack：是操作数深度的最大值，虚拟机根据这个来分配栈帧中操作栈深度。
				max_locals：是局部变量表所需的存储空间。单位是slot（1 slot=4B=32bit=32位）。不超过32位的用1个slot，double和long用2个slot。
					    ！实例方法中隐藏的this、trycatch中定义的异常、方法体中定义的局部变量都存储在局部变量表中。
					   （！slot可以重用，当一个变量超出作用域的时候，这个变量的slot可以被其他变量使用，所以不是简单的相加就能算出max_locals）
				code_length和code：用来存储java源程序编译后的字节码指令，每个指令占u1（范围是0-255，所以最多256个指令）。虚拟机读到一个指令就可以知道这个
				                   指令后面是否需要参数，参数如何理解。
					           code_length是u4，最大能到2的32次-1，但是虚拟机规定不超过65535条字节码指令，超出的话，java编译器拒绝编译。
					           具体见书P415（指令集详细）
			

			Code属性是class文件最重要的一个属性，java程序的信息分为两部分：代码（Code，方法体里的代码）和元数据（Metadata，包括类、字段、方法定义及其他信息）
			两部分的话，那么在整个class文件中，Code属性用来描述代码，其他所有数据项目都用于描述元数据。

			java虚拟机执行字节码指令是基于栈的体系结构。但是和一般的基于堆栈的零字节指令不太一样，后面可能会带有指令需要的参数。
			见书P184有实例讲解，便于理解。

			虽然方法中没有局部变量，但是ArgsSize为1，这是为什么？
				因为java中可以通过方法访问到这个方法所属的对象，而其实现很简单，就是在编译的时候在方法的局部变量表中加上一个this引用，指向这个方法的对象。
				这个处理方法只对实例方法有效，类方法（static方法）不会保存this引用。
			

			异常表（exception_table）：
				数据结构：
					u2		start_pc		1个		//捕捉异常的开始行数
					u2		end_pc			1个		//捕捉异常的结束行数
					u2		handler_pc		1个		//出现异常后，跳转到多少行继续执行
					u2		catch_type		1个		//指向常量池中的一个Class_info

				如果字节码在第start_pc行到end_pc行之间（不含end_pc行）出现了类型为catch_type或者其子类的异常，就跳转到handler_pc行继续处理。当catch_type
				的值为0时，代表任意异常都需要转向到handler_pc处进行处理。
			
			public int inc(){
				int x;
				try{
					x=1;
					return x;
				}catch(Exception e){
					x=2;
					return x;
				}
				finally{
					x=3;
				}
			}
			方法正常返回1，捕捉到异常返回2，非正常退出没有返回值。
			在finally中虽然把x设为3，但是并没有把它的值保存到本地变量表中（returnValue），所以返回的时候还是1或者2。


		2.Exceptions属性：
			和上面的异常表不同，这个Exceptions属性是列举出方法中可能抛出的受查异常（checked Exception），也就是方法描述时throws关键字后面列举的异常。

			数据结构：
				u2		attribute_name_index		1个			
				u4		attribute_length		1个			//内存中的长度
				u2		number_of_exceptions		1个			//方法抛出number_of_exceptions个异常
				u2		exception_index_table		number_of_exceptions个   //指向常量池中一个Class_info表

		3.LineNumberTable属性：
			用于描述java源码行号与字节码行号（字节码偏移量）之间的对应关系。
			在javac中分别使用-g:none或-g:lines来取消要求生成这个信息，如果不生成，当抛出异常的时候不会显示行号。在调试程序的时候无法设置断点。
		
			数据结构：
				u2			attribute_name_index		1个			
				u4			attribute_length		1个			//内存中的长度
				u2			line_number_table_length	1个
				line_number_info	line_number_table		line_number_table_length个

				line_number_info数据结构：
					u2		start_pc		1个	//字节码行号
					u2		line_number		1个	//java源码行号

					作用就是将java源码和字节码对应起来。
			
		4.LocalVariableTable属性：
			用于描述栈帧中局部变量表中的变量与java源码中定义的变量之间的关系。
			在javac中分别使用-g:none或-g:vars来取消或生成这个信息。如果不生成，在其他人引用这个方法时，所有参数名都会丢失，用args0、args1代替。对程序运行没有
			影响，但是对编码效率有影响。

			数据结构：
				u2			attribute_name_index		1个			
				u4			attribute_length		1个			//内存中的长度
				u2			local_variable_table_length	1个
				local_variable_info	local_variable_table		local_variable_table_length个

				local_variable_info数据结构：
					u2		start_pc			1
					u2		length				1
					u2		name_index			1
					u2		descriptor_index		1
					u2		index				1

					start_pc和length记录局部变量生命周期开始的字节码偏移量及其作用范围覆盖的长度，两者结合起来就是局部变量在字节码中的生命周期。
					name_index和descriptor_index都是指向常量池中的utf8_info，代表局部变量的简单名称和描述符。
					index是局部变量在栈帧布局变量表中slot的位置。当类型是64位时，占用index、index+1两个slot。
			
			jdk1.5之后，LocalVariableTable属性增加了一个“姐妹属性”LocalVariableTypeTable，这是把LocalVariableTable的descriptor_index换成了Signature（特征签名）
			，对应非泛型来说，描述符和特征签名一样，但是泛型引入后，由于描述符中泛型的参数化类型要被擦除，描述符就无法精确描述泛型类型了，所以就出现了
			LocalVariableTypeTable。

		5.SourceFile属性：
			用于记录生成这个class文件的源码文件名称。
			用-g:none或-g:source来关闭或要求生成这个信息。
			关闭的话，出现异常不会显示文件名称。

			数据结构：
				u2			attribute_name_index		1个			
				u4			attribute_length		1个			//内存中的长度
				u2			sourcefile_index		1个			//指向常量池中utf8_info（文件名）
		
		6.ConstantValue属性：
			通知虚拟机自动为静态变量赋值。只有static修饰的变量（类变量）才能使用这个属性。

			类中的实例变量在实例构造器<init>方法中进行的，而对于类变量则有两种方式可以选择：在类构造器<clinit>方法中或使用ConstantValue属性。
			目前编译器选择是：如果同时使用final和static修饰变量，并且数据类型是基本类型或String的话，就用ConstantValue来赋值，否则用<clinit>。
						
		
				

			



			
		
		




		

		
		








		
			
	
		

		

	
	
	

	
