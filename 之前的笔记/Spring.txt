Spring中的关键是:IOC(控制反转)和AOP。
Spring为企业提供了轻量级的解决方案，包括：基于依赖注入的核心机制、基于AOP的声明式事务管理、与多种持久层的整合、以及优秀的web MVC框架等。




IOC:将控制权从自己手中转移到了Spring手里。



AOP：aspect oriental programming。面向切面编程。
首先，在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。 
所谓的核心业务，比如登陆，增加数据，删除数据都叫核心业务 
所谓的周边功能，比如性能统计，日志，事务管理等等 

周边功能在Spring的面向切面编程AOP思想里，即被定义为切面 

在面向切面编程AOP的思想里面，核心业务功能和切面功能分别独立进行开发 
然后把切面功能和核心业务功能 "编织" 在一起，这就叫AOP





导入Spring相关的JAR包。将lib解压，project-properties-Java Built Path-add extenal jars-选中lib中所有jar包-Apply和OK。
新建applicationContext.xml
	配置如下：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
   http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/aop 
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
   http://www.springframework.org/schema/tx 
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/context      
   http://www.springframework.org/schema/context/spring-context-3.0.xsd">
  
    <bean name="c" class="com.example.pojo.Category">
        <property name="name" value="category 1" />
    </bean>
</beans>



使用时：新建ApplicationContext context=new ClassPathXmlApplicationContext(new String[]{"applicationContext.xml"});实例.
	再通过(Category)context.getBean("c");获得Category对象，之后就可以使用category对象中的属性和方法了。

当一个对象中的成员变量是另外一个类的对象时：
	<bean name="p" class="com.example.pojo.Product">
		<property name="categroy" ref="c"/>
	</bean>
其中c是其他bean的name。



在AOP中：
<bean name="s" class="com.how2java.service.ProductService">
    </bean>    
     
    <bean id="loggerAspect" class="com.how2java.aspect.LoggerAspect"/>
     
    <aop:config>
        <aop:pointcut id="loggerCutpoint"
            expression=
            "execution(* com.how2java.service.ProductService.*(..)) "/>
             
        <aop:aspect id="logAspect" ref="loggerAspect">
            <aop:around pointcut-ref="loggerCutpoint" method="log"/>
        </aop:aspect>
    </aop:config>     


AOP基于注解：
@Before(value="excution(* com.exmaple.service.ProductService.*(..))")   在事务方法开始之前执行。
@AfterReturning(value="excution(* com.example.service.ProductServcie.*(..))",returning="str") 只有在事务方法成功结束时，才会调用增强处理，returning是事务方法的返回值，advice方法如果有形参为(String str)的话，则只匹配返回类型为String的事务方法。
@After(value="excution(* com.example.service.ProductService.*(..))")  无论事务成功与否都会织入增强处理。
@Around(value="excution(* com.exmaple.service.ProductService.*(..))")   功能最强，可以控制何时织入，如何织入，完全阻止事务方法。（可以修改事务方法传入的形参、方法返回值），这个方法的形参必须是ProceedingJoinPoint。可以通过 jp.getArgs()来获取形参列表来修改形参。通过Object result=jp.proceed(agrs);方法来提交形参和获取返回值。并通过return修改过的result来实现修改返回值的效果。


在使用自动代理时，还可以定义参数表达式，可以配合切面表达式使用。例如：excution(* com.example.service.ProductService.*(..)&&args(name,grade)) 定义了args(name,grade)后，增强方法可以多两公分参数。 还可以args(name,grade,..)    可以匹配参数为（String name,int grade,后面随便）的方法。
在
使用xml代理时，配合参数表达式如：excution(* com.example.service.ProductService.*(..) and args(aa))。区别：&&换成and

不要混合使用自动代理和<aop:config>，可能回出现问题：比如，有些增强处理没有被织入。








当Bean实例中的成员变量是List、数组、Set、Map、properties等在applicationContext.xml文件中配置如下:
List、数组:
<property name="xxx">
	<list>
		<value>15</value>
	</list>
</property>

Map:
<map>
	<entry key="xxx" value="yy"/>
	<entry key="xxx" value-ref="stoneAxe"/2>
</map>

<set>
	<value>普通字符串</value>
	<bean class="xx.xxx.xxxx"/>           这行是在set中添加其他的嵌套Bean            嵌套Bean和ref的区别：嵌套Bean Spring容器访问不到。
	<ref bean="stoneAxe"/>                这行是在set中添加xml中声明的其它Bean
	<list>
		<value>20</value>
		<set>
			<value type="int">25</value>
		</set>
	</list>                             可以在继续嵌套list set map 数组等
</set>


properties中:
<props>
	<prop key="血压">正常</prop>
</props>




Spring容器在初始化时会预先初始化所有singleton的Bean，当一个singleton的Bean依赖一个prototype的Bean时，容器会先初始化prototype的Bean然后为singleton注入，在以后singleton持有的prototype不会重新请求，这就导致了一个问题：singleton持有的prototype的Bean违反了prototype的原则。解决方法如下：
	使用lookup方法注入：（1）将调用者的Bean定义为抽象类，并定义一个抽象方法来获取被依赖的Bean。（2）在<bean>中添加<lookup_method>子元素让Spring为调用者Bean的实现类实				现指定的抽象方法。具体见书P590



扫了一波盲。 刘林老师在spring-servlet.xml中 的aop中配置的advisor是事务方面的设置。具体见P689
继续扫一波盲   刘林老师在web.xml中配置的   ContextLoadListener可以自动查找在WEB-INF/下的applicationContext.xml文件。